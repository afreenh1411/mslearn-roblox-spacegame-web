trigger:
- '*'

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release-pipeline'

stages:
  - stage: 'Build'
    displayName: 'Build the web application'
    jobs:
    - job: 'Build'
      displayName: 'Build job'
      pool:
        vmImage: 'ubuntu-20.04'
        demands:
        - npm

      variables:
        wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
        dotnetSdkVersion: '6.x'

      steps:
      - task: UseDotNet@2
        displayName: 'Use .NET SDK $(dotnetSdkVersion)'
        inputs:
          version: '$(dotnetSdkVersion)'

      - task: Npm@1
        displayName: 'Run npm install'
        inputs:
          verbose: false

      - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
        displayName: 'Compile Sass assets'

      - task: gulp@1
        displayName: 'Run gulp tasks'

      - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
        displayName: 'Write build info'
        workingDirectory: $(wwwrootDir)

      - task: DotNetCoreCLI@2
        displayName: 'Restore project dependencies'
        inputs:
          command: 'restore'
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Build the project - $(buildConfiguration)'
        inputs:
          command: 'build'
          arguments: '--no-restore --configuration $(buildConfiguration)'
          projects: '**/*.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Test the project - $(buildConfiguration)'
        inputs:
          command: 'test'
          arguments: '--no-build --configuration $(buildConfiguration)'
          projects: '**/*.Tests.csproj'

      # Add tasks to perform code coverage testing
      - task: DotNetCoreCLI@2
        displayName: 'Install .NET tools from local manifest'
        inputs:
          command: custom
          custom: tool
          arguments: 'restore'
          #projects: '**/*.Tests.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Test - code coverage'
        inputs:
          command: 'test'    
          arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
          publishTestResults: true
          projects: '**/*.Tests.csproj'

      - task: DotNetCoreCLI@2
        displayName: 'Create code coverage report'
        inputs:
          command: custom
          custom: tool
          arguments: 'run reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines'

      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage report'
        inputs:
          codeCoverageTool: 'cobertura'
          summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'  

      - task: DotNetCoreCLI@2
        displayName: 'Publish the project - $(buildConfiguration)'
        inputs:
          command: 'publish'
          projects: ' **/*.csproj' #|  **/*.csproj !**/*Tests.csproj'
          publishWebProjects: true #false
          arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
          zipAfterPublish: true

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
        condition: succeeded()

  - stage: 'DeployDev'
    displayName: 'Deploy the web application to dev'
    dependsOn: 'Build'
    condition: |
      (
        succeeded(), 
       eq(variables['Build.SourceBranchName'], variables['releaseBranchName'])
      )
      
    jobs:
    # -job: 'echo'
    #   steps:
    #   - script: 'echo "$(environment.Name)" > env.txt'

    - deployment: Deploy
      pool:
        vmImage: 'ubuntu-20.04'
      environment: dev
      
      variables:
      - group: Release 
      
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: drop
            - task: AzureWebApp@1
              displayName: 'Azure App service Deploy: website'
              inputs:
                azureSubscription: 'Resource Manager - Roblox - Space Game'
                appName: '$(WebAppNameDev)' # This is variable name created in the library under 3,variable group 'Relaese'
                package: '$(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip'
